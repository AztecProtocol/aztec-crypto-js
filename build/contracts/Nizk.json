{
  "contractName": "Nizk",
  "abi": [
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50611136806100206000396000f300608060405234801561001057600080fd5b50610019610d83565b6375d3464181146100715763acc8cecd811461007e5763814fba66811461008b576391036ec8811461009857623ec6b981146100a5576306a791d081146100bf5763dda62ba581146100d65761019460005260206000fd5b610079610872565b6100ef565b6100866105d6565b6100ef565b610093610476565b6100ef565b6100a061034a565b6100ef565b6040516100ba816044356024356004356100f5565b604081f35b6040516080600482376100d181610131565b604081f35b6040516080600482376100ea608482610157565b602081f35b5061012c565b6040518181528260208201528360408201526040856060836007600019fa15156101255761019060005260206000fd5b5050505050565b610152565b6040816080836006600019fa151561014f5761019060005260206000fd5b50565b610345565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782356020840135604085013560608601357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a151717171717171715610235576101f460005260206000fd5b85516020870151604088015160608901516040518481528360208201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808201528260c08201528160e082015288610120820152876101008201528661016082015285610140820152602081610180836008600019fa815115811517156103365761019060005260206000fd5b50505050505050505050505050565b610471565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a43560846040516080810160405260c4361415156103b15761019060005260206000fd5b6024356044356103c18183610f95565b6103cf8386838903856100f5565b6103e8604084016103df86610ff5565b600260016100f5565b6103f183610131565b825160608401526020830151608084015260606004843760a08320858114156104655761042d6020850161042487610fe2565b600260016100f5565b82606085015281608085015261044560208501610131565b60016060850152600260808501526040602460a08601376001845260e084f35b61019360005260206000fd5b6105d1565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610124356101046104ca610100610db1565b60405160808101604052610144361415156104eb5761019060005260206000fd5b856104f584610ff5565b83096104ff610e22565b610510848a898809838b03856100f5565b61051985610dcb565b945088898a61052789610fe2565b8809890984089250610537610de2565b9150915061054f604085018a898809838b03856100f5565b61055884610131565b610560610e02565b9150915061057e604085018a61057589610ff5565b880983856100f5565b61058784610131565b6105986040850184600260016100f5565b6105a184610131565b84604085015260608420878114156105c55760e0602460208701376001855260e085f35b61019360005260206000fd5b61086d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476102c43561026461062a610260610db1565b60405160c081016040526102e43614151561064b5761019060005260206000fd5b8561065584610ff5565b830961065f610e22565b610670848a898809838b03856100f5565b61067985610dcb565b945088896106868861100c565b870984089250610694610e85565b915091506106ac604085018a898809838b03856100f5565b6106b584610131565b6106be85610dcb565b945088896106cb88611040565b8709840892506106d9610ec9565b915091506106f1604085018a898809838b03856100f5565b6106fa84610131565b61070385610dcb565b945061070d610de2565b915091508160408501528088036060850152610727610e42565b9150915081608085015280880360a085015261074560408501610131565b61074d610ea7565b915091508160808501528060a085015261076960408501610131565b6040840151915060608401519050610789604085018a89880983856100f5565b61079284610131565b61079a610e02565b915091506107b8604085018a6107af89610ff5565b880983856100f5565b6107c184610131565b6107c9610e63565b915091506107e7604085018a6107de8961100c565b880983856100f5565b6107f084610131565b6107f8610eeb565b91509150610818604085018a61080d89611040565b8809838b03856100f5565b61082184610131565b6108326040850184600260016100f5565b61083b84610131565b846040850152606084208781141561086157610240602460208701376001855261026085f35b61019360005260206000fd5b610d7e565b6104e4361415156108895761019060005260206000fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610444356103646108dd610360610db1565b60405160c081016040526108ef610f2f565b6109008389888709838a03856100f5565b610908610f0d565b9150915061091e608084018988870983856100f5565b8361092885610dcb565b9450610932610f73565b9250925061094a604085018a898809848b03866100f5565b61095384610131565b61095b610f51565b92509250610971604085018a89880984866100f5565b61097d60408501610131565b835192506020840151915061099461046485610157565b828452816020850152886109a78761108e565b82096109b1610f0d565b935093506109d1604086018b6109c68a61105a565b8509858c03876100f5565b6109da85610131565b898a6109e5896110a8565b8809820890506109f3610f51565b93509350610a13604086018b610a088a611074565b8909858c03876100f5565b610a1c85610131565b610a2586610dcb565b9550898a610a3289610ff5565b880982089050610a40610e22565b93509350610a58604086018b8a8909858c03876100f5565b610a6185610131565b610a6a86610dcb565b9550898a610a7789611026565b880982089050610a85610e63565b93509350610a9d604086018b8a8909858c03876100f5565b610aa685610131565b610aaf86610dcb565b9550898a610abc89611040565b880982089050610aca610ec9565b93509350610ae2604086018b8a8909858c03876100f5565b610aeb85610131565b610af486610dcb565b9550898a610b018961105a565b880982089050610b0f610e42565b9350935083604086015282606086015260016080860152600260a0860152610b3960408601610131565b6040850151935060608501519250610b5b604086018b8a8909858c03876100f5565b610b6485610131565b610b6c610e85565b93509350610b8a604086018b610b818a611026565b890985876100f5565b610b9385610131565b610b9c86610dcb565b9550898a610ba989611074565b880982089050610bb7610ea7565b9350935083604086015282606086015260016080860152600260a0860152610be160408601610131565b6040850151935060608501519250610c03604086018b8a8909858c03876100f5565b610c0c85610131565b610c14610eeb565b93509350610c32604086018b610c298a611040565b890985876100f5565b610c3b85610131565b610c4486610dcb565b9550898a610c518961105a565b880982089050898a610c6289611074565b880982089050610c70610de2565b935093508360408601528260608601527f030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd360808601527f15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c460a0860152610cd860408601610131565b6040850151935060608501519250610cfa604086018b8a8909858c03876100f5565b610d0385610131565b610d0b610e02565b93509350610d29604086018b610d208a610ff5565b890985876100f5565b610d3285610131565b610d436040860182600260016100f5565b610d4c85610131565b8560408601526060852088811415610d7257610240602460208801376001865261026086f35b61019360005260206000fd5b610dac565b60007c010000000000000000000000000000000000000000000000000000000060003504905090565b610dc6565b60008160046040513781604051209050919050565b610ddd565b60008160005260206000209050919050565b610dfd565b60008060243591506044359050610df98183610f95565b9091565b610e1d565b60008060643591506084359050610e198183610f95565b9091565b610e3d565b60008060a435915060c4359050610e398183610f95565b9091565b610e5e565b60008060e4359150610104359050610e5a8183610f95565b9091565b610e80565b600080610124359150610144359050610e7c8183610f95565b9091565b610ea2565b600080610164359150610184359050610e9e8183610f95565b9091565b610ec4565b6000806101a43591506101c4359050610ec08183610f95565b9091565b610ee6565b6000806101e4359150610204359050610ee28183610f95565b9091565b610f08565b600080610224359150610244359050610f048183610f95565b9091565b610f2a565b600080610264359150610284359050610f268183610f95565b9091565b610f4c565b6000806102a43591506102c4359050610f488183610f95565b9091565b610f6e565b6000806102e4359150610304359050610f6a8183610f95565b9091565b610f90565b600080610324359150610344359050610f8c8183610f95565b9091565b610fdd565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808384098160038385858788090908141515610fd85761019060005260206000fd5b505050565b610ff0565b600060208203359050919050565b611007565b6000611000826110c2565b9050919050565b611021565b600061101a602083016110c2565b9050919050565b61103b565b6000611034602083016110c2565b9050919050565b611055565b600061104e604083016110c2565b9050919050565b61106f565b6000611068606083016110c2565b9050919050565b611089565b6000611082608083016110c2565b9050919050565b6110a3565b600061109c60a083016110c2565b9050919050565b6110bd565b60006110b660c083016110c2565b9050919050565b611108565b6000813590507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001810681148115151615156111035761019060005260206000fd5b919050565b0000a165627a7a7230582036094bd0bce265e1492b3970228b30e28846977c3cd863f5f7b440b4a2cdabee0029",
  "deployedBytecode": "",
  "sourceMap": "1693:28860:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1693:28860:2;;;;;;;",
  "deployedSourceMap": "1693:28860:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1693:28860:2;1892:21;;;;1935:10;1930:118;;;;2070:10;2065:116;;;;2203:10;2198:120;;;;2340:10;2335:119;;;;2476:10;2471:243;;;;2736:10;2731:235;;;;2988:10;2983:247;;;;3289:3;3284;3277:16;3356:4;3351:3;3344:17;1930:118;2013:17;;;;1930:118;;2065:116;2147:16;;;;2065:116;;2198:120;2282:18;;;;2198:120;;2335:119;2418:18;;;;2335:119;;2471:243;2565:4;2559:11;2591:69;2658:1;2651:4;2638:18;2631:4;2618:18;2611:4;2598:18;2591:69;;;2691:4;2688:1;2681:15;2731:235;2825:4;2819:11;2873:4;2867;2864:1;2851:27;2899:13;2910:1;2899:13;;;2943:4;2940:1;2933:15;2983:247;3078:4;3072:11;3126:4;3120;3117:1;3104:27;3152:24;3171:4;3168:1;3152:24;;;3207:4;3204:1;3197:15;1885:1494;;3540:353;;;3601:4;3595:11;3633:1;3630;3623:12;3673:1;3666:4;3663:1;3659:12;3652:23;3713:1;3706:4;3703:1;3699:12;3692:23;3776:4;3773:1;3767:4;3764:1;3761;3757;3753:6;3742:39;3735:47;3732:2;;;3818:3;3812:4;3805:17;3856:4;3850;3843:18;3732:2;3568:325;;;;;;;3983:202;;;4068:4;4065:1;4059:4;4056:1;4053;4049;4045:6;4034:39;4027:47;4024:2;;;4110:3;4104:4;4097:17;4148:4;4142;4135:18;4024:2;4006:179;;;4253:2558;;;4328:66;4439:3;4426:17;4506:4;4501:3;4497:14;4484:28;4566:4;4561:3;4557:14;4544:28;4626:4;4621:3;4617:14;4604:28;5228:65;5219:7;5216:78;5126:66;5117:7;5114:79;5024:66;5015:7;5012:79;4922:66;4913:7;4910:79;4879:7;4872:15;4841:7;4834:15;4803:7;4796:15;4766:7;4759:15;4735:77;4732:118;4729:159;4726:264;4723:369;4720:474;4717:578;4714:2;;;5347:3;5341:4;5334:17;5385:4;5379;5372:18;4714:2;5442:6;5436:13;5495:4;5487:6;5483:17;5477:24;5547:4;5539:6;5535:17;5529:24;5599:4;5591:6;5587:17;5581:24;5802:4;5796:11;5834:3;5831:1;5824:14;5876:3;5869:4;5866:1;5862:12;5855:25;5918:66;5911:4;5908:1;5904:12;5897:88;6023:66;6016:4;6013:1;6009:12;6002:88;6128:66;6121:4;6118:1;6114:12;6107:88;6233:65;6226:4;6223:1;6219:12;6212:87;6337:3;6330:4;6327:1;6323:12;6316:25;6379:3;6372:4;6369:1;6365:12;6358:25;6422:7;6414:5;6411:1;6407:13;6400:30;6469:7;6461:5;6458:1;6454:13;6447:30;6516:7;6508:5;6505:1;6501:13;6494:30;6563:7;6555:5;6552:1;6548:13;6541:30;6638:4;6635:1;6628:5;6625:1;6622;6618;6614:6;6603:40;6696:1;6690:8;6683:16;6673:7;6666:15;6663:37;6660:2;;;6736:3;6730:4;6723:17;6774:4;6768;6761:18;6660:2;4291:2520;;;;;;;;;;;;;;;6825:2426;;;7189:66;7291;7396:4;7383:18;7427:4;7472;7466:11;7523:4;7511:10;7507:21;7501:4;7494:35;7602:4;7588:12;7585:22;7578:30;7575:2;;;7644:3;7638:4;7631:17;7682:4;7676;7669:18;7575:2;7809:4;7796:18;7853:4;7840:18;7875:21;7894:1;7891;7875:21;;;7914:45;7948:10;7945:1;7941;7928:11;7924:19;7921:1;7914:45;;;7976:46;8016:4;8004:10;8000:21;7989:9;7996:1;7989:9;;;7986:1;7983;7976:46;;;8039:22;8050:10;8039:22;;;8149:10;8143:17;8136:4;8124:10;8120:21;8113:48;8230:4;8218:10;8214:21;8208:28;8201:4;8189:10;8185:21;8178:59;8285:4;8279;8267:10;8254:36;8493:4;8481:10;8471:27;8529:1;8521:6;8518:13;8515:2;;;8612:45;8651:4;8639:10;8635:21;8625:8;8631:1;8625:8;;;8622:1;8619;8612:45;;;8708:1;8701:4;8689:10;8685:21;8678:32;8761:1;8754:4;8742:10;8738:21;8731:32;8784:33;8811:4;8799:10;8795:21;8784:33;;;8902:3;8895:4;8883:10;8879:21;8872:34;8957:3;8950:4;8938:10;8934:21;8927:34;9055:4;9049;9042;9030:10;9026:21;9013:47;9100:3;9088:10;9081:23;9144:4;9132:10;9125:24;8515:2;9198:3;9192:4;9185:17;9232:4;9226;9219:18;6853:2398;9265:2769;;;9645:66;9747;9852:5;9839:19;9884:5;9952:17;9963:5;9952:17;;;10073:4;10067:11;10124:4;10112:10;10108:21;10102:4;10095:35;10204:5;10190:12;10187:23;10180:31;10177:2;;;10247:3;10241:4;10234:17;10285:4;10279;10272:18;10177:2;10422:9;10411;10418:1;10411:9;;;10398:11;10391:41;10461:4;;;;10482:77;10548:10;10536:9;10533:1;10520:11;10513:33;10509:1;10496:11;10492:19;10489:1;10482:77;;;10591:24;10603:11;10591:24;;;10576:39;;10774:9;10762;10750;10740:8;10746:1;10740:8;;;10727:11;10720:40;10717:1;10710:62;10701:7;10694:90;10683:101;;10809:4;;;;10801:12;;;;10830:88;10912:4;10900:10;10896:21;10884:9;10881:1;10868:11;10861:33;10857:1;10844:11;10840:19;10837:1;10830:88;;;10935:22;10946:10;10935:22;;;10983:4;;;;10975:12;;;;11004:78;11076:4;11064:10;11060:21;11048:9;11037;11044:1;11037:9;;;11024:11;11017:41;11014:1;11011;11004:78;;;11099:22;11110:10;11099:22;;;11250:44;11288:4;11276:10;11272:21;11263:7;11260:1;11257;11250:44;;;11311:22;11322:10;11311:22;;;11671:11;11664:4;11652:10;11648:21;11641:42;11736:4;11724:10;11714:27;11772:1;11764:6;11761:13;11758:2;;;11839:4;11833;11826;11814:10;11810:21;11797:47;11884:3;11872:10;11865:23;11928:4;11916:10;11909:24;11758:2;11981:3;11975:4;11968:17;12015:4;12009;12002:18;9293:2741;12047:4731;;;12613:66;12715;12820:5;12807:19;12852:5;12921:17;12932:5;12921:17;;;13038:4;13032:11;13089:4;13077:10;13073:21;13067:4;13060:35;13168:5;13154:12;13151:23;13144:31;13141:2;;;13211:3;13205:4;13198:17;13249:4;13243;13236:18;13141:2;13386:9;13375;13382:1;13375:9;;;13362:11;13355:41;13425:4;;;;13446:77;13512:10;13500:9;13497:1;13484:11;13477:33;13473:1;13460:11;13456:19;13453:1;13446:77;;;13555:24;13567:11;13555:24;;;13540:39;;13717:9;13705;13694;13701:1;13694:9;;;13681:11;13674:41;13665:7;13658:69;13647:80;;13752:4;;;;13744:12;;;;13773:88;13855:4;13843:10;13839:21;13827:9;13824:1;13811:11;13804:33;13800:1;13787:11;13783:19;13780:1;13773:88;;;13878:22;13889:10;13878:22;;;13932:24;13944:11;13932:24;;;13917:39;;14094:9;14082;14071;14078:1;14071:9;;;14058:11;14051:41;14042:7;14035:69;14024:80;;14129:4;;;;14121:12;;;;14150:88;14232:4;14220:10;14216:21;14204:9;14201:1;14188:11;14181:33;14177:1;14164:11;14160:19;14157:1;14150:88;;;14255:22;14266:10;14255:22;;;14309:24;14321:11;14309:24;;;14294:39;;14428:4;;;;14420:12;;;;14479:1;14472:4;14460:10;14456:21;14449:32;14544:1;14532:11;14528:18;14521:4;14509:10;14505:21;14498:49;14572:4;;;;14564:12;;;;14623:1;14616:4;14604:10;14600:21;14593:32;14688:1;14676:11;14672:18;14665:4;14653:10;14649:21;14642:49;14708:33;14735:4;14723:10;14719:21;14708:33;;;14766:4;;;;14758:12;;;;14817:1;14810:4;14798:10;14794:21;14787:32;14866:1;14859:4;14847:10;14843:21;14836:32;14885:33;14912:4;14900:10;14896:21;14885:33;;;14979:4;14967:10;14963:21;14957:28;14952:33;;15029:4;15017:10;15013:21;15007:28;15002:33;;15052:70;15116:4;15104:10;15100:21;15088:9;15085:1;15072:11;15065:33;15062:1;15059;15052:70;;;15139:22;15150:10;15139:22;;;15240:4;;;;15232:12;;;;15261:78;15333:4;15321:10;15317:21;15305:9;15294;15301:1;15294:9;;;15281:11;15274:41;15271:1;15268;15261:78;;;15356:22;15367:10;15356:22;;;15457:4;;;;15449:12;;;;15478:78;15550:4;15538:10;15534:21;15522:9;15511;15518:1;15511:9;;;15498:11;15491:41;15488:1;15485;15478:78;;;15573:22;15584:10;15573:22;;;15691:4;;;;15683:12;;;;15712:96;15802:4;15790:10;15786:21;15774:9;15763;15770:1;15763:9;;;15750:11;15743:41;15739:1;15726:11;15722:19;15719:1;15712:96;;;15825:22;15836:10;15825:22;;;15992:44;16030:4;16018:10;16014:21;16005:7;16002:1;15999;15992:44;;;16053:22;16064:10;16053:22;;;16413:11;16406:4;16394:10;16390:21;16383:42;16478:4;16466:10;16456:27;16514:1;16506:6;16503:13;16500:2;;;16581:5;16575:4;16568;16556:10;16552:21;16539:48;16627:3;16615:10;16608:23;16671:5;16659:10;16652:25;16500:2;16725:3;16719:4;16712:17;16759:4;16753;16746:18;12073:4705;16791:9048;;;17612:5;17598:12;17595:23;17588:31;17585:2;;;17689:3;17683:4;17676:17;17727:4;17721;17714:18;17585:2;17784:66;17886;17991:5;17978:19;18023:5;18103:17;18114:5;18103:17;;;18221:4;18215:11;18272:4;18260:10;18256:21;18250:4;18243:35;18632:8;;;;18657:77;18723:10;18711:9;18708:1;18695:11;18688:33;18684:1;18671:11;18667:19;18664:1;18657:77;;;18759:8;;;;18751:16;;;;18784:70;18848:4;18836:10;18832:21;18820:9;18817:1;18804:11;18797:33;18794:1;18791;18784:70;;;18883:11;18973:24;18985:11;18973:24;;;18958:39;;19023:8;;;;19015:16;;;;19048:88;19130:4;19118:10;19114:21;19102:9;19099:1;19086:11;19079:33;19075:1;19062:11;19058:19;19055:1;19048:88;;;19325:22;19336:10;19325:22;;;19424:8;;;;19416:16;;;;19449:70;19513:4;19501:10;19497:21;19485:9;19482:1;19469:11;19462:33;19459:1;19456;19449:70;;;19536:33;19563:4;19551:10;19547:21;19536:33;;;19813:10;19807:17;19802:22;;19868:4;19856:10;19852:21;19846:28;19841:33;;19891:34;19919:5;19907:10;19891:34;;;20078:1;20066:10;20059:21;20127:1;20120:4;20108:10;20104:21;20097:32;20265:9;20254;20261:1;20254:9;;;20248:4;20241:34;20300:8;;;;20292:16;;;;20325:89;20408:4;20396:10;20392:21;20380:9;20369;20376:1;20369:9;;;20363:4;20356:34;20352:1;20339:11;20335:19;20332:1;20325:89;;;20431:22;20442:10;20431:22;;;20540:9;20528;20517;20524:1;20517:9;;;20504:11;20497:41;20488:7;20481:69;20470:80;;20575:8;;;;20567:16;;;;20600:96;20690:4;20678:10;20674:21;20662:9;20651;20658:1;20651:9;;;20638:11;20631:41;20627:1;20614:11;20610:19;20607:1;20600:96;;;20713:22;20724:10;20713:22;;;20768:24;20780:11;20768:24;;;20753:39;;20930:9;20918;20907;20914:1;20907:9;;;20894:11;20887:41;20878:7;20871:69;20860:80;;20965:4;;;;20957:12;;;;20986:88;21068:4;21056:10;21052:21;21040:9;21037:1;21024:11;21017:33;21013:1;21000:11;20996:19;20993:1;20986:88;;;21091:22;21102:10;21091:22;;;21145:24;21157:11;21145:24;;;21130:39;;21307:9;21295;21284;21291:1;21284:9;;;21271:11;21264:41;21255:7;21248:69;21237:80;;21342:4;;;;21334:12;;;;21363:88;21445:4;21433:10;21429:21;21417:9;21414:1;21401:11;21394:33;21390:1;21377:11;21373:19;21370:1;21363:88;;;21468:22;21479:10;21468:22;;;21522:24;21534:11;21522:24;;;21507:39;;21684:9;21672;21661;21668:1;21661:9;;;21648:11;21641:41;21632:7;21625:69;21614:80;;21719:4;;;;21711:12;;;;21740:88;21822:4;21810:10;21806:21;21794:9;21791:1;21778:11;21771:33;21767:1;21754:11;21750:19;21747:1;21740:88;;;21845:22;21856:10;21845:22;;;21899:24;21911:11;21899:24;;;21884:39;;22085:9;22073;22062;22069:1;22062:9;;;22049:11;22042:41;22033:7;22026:69;22015:80;;22120:4;;;;22112:12;;;;22171:1;22164:4;22152:10;22148:21;22141:32;22220:1;22213:4;22201:10;22197:21;22190:32;22269:1;22262:4;22250:10;22246:21;22239:32;22318:1;22311:4;22299:10;22295:21;22288:32;22337:33;22364:4;22352:10;22348:21;22337:33;;;22414:4;22402:10;22398:21;22392:28;22387:33;;22464:4;22452:10;22448:21;22442:28;22437:33;;22487:88;22569:4;22557:10;22553:21;22541:9;22538:1;22525:11;22518:33;22514:1;22501:11;22497:19;22494:1;22487:88;;;22592:22;22603:10;22592:22;;;22640:4;;;;22632:12;;;;22661:78;22733:4;22721:10;22717:21;22705:9;22694;22701:1;22694:9;;;22681:11;22674:41;22671:1;22668;22661:78;;;22756:22;22767:10;22756:22;;;22810:24;22822:11;22810:24;;;22795:39;;22996:9;22984;22973;22980:1;22973:9;;;22960:11;22953:41;22944:7;22937:69;22926:80;;23031:4;;;;23023:12;;;;23082:1;23075:4;23063:10;23059:21;23052:32;23131:1;23124:4;23112:10;23108:21;23101:32;23180:1;23173:4;23161:10;23157:21;23150:32;23229:1;23222:4;23210:10;23206:21;23199:32;23248:33;23275:4;23263:10;23259:21;23248:33;;;23325:4;23313:10;23309:21;23303:28;23298:33;;23375:4;23363:10;23359:21;23353:28;23348:33;;23398:88;23480:4;23468:10;23464:21;23452:9;23449:1;23436:11;23429:33;23425:1;23412:11;23408:19;23405:1;23398:88;;;23503:22;23514:10;23503:22;;;23551:4;;;;23543:12;;;;23572:78;23644:4;23632:10;23628:21;23616:9;23605;23612:1;23605:9;;;23592:11;23585:41;23582:1;23579;23572:78;;;23667:22;23678:10;23667:22;;;23721:24;23733:11;23721:24;;;23706:39;;23907:9;23895;23884;23891:1;23884:9;;;23871:11;23864:41;23855:7;23848:69;23837:80;;24004:9;23992;23981;23988:1;23981:9;;;23968:11;23961:41;23952:7;23945:69;23934:80;;24039:4;;;;24031:12;;;;24090:1;24083:4;24071:10;24067:21;24060:32;24139:1;24132:4;24120:10;24116:21;24109:32;24188:65;24181:4;24169:10;24165:21;24158:96;24308:66;24301:4;24289:10;24285:21;24278:97;24392:33;24419:4;24407:10;24403:21;24392:33;;;24469:4;24457:10;24453:21;24447:28;24442:33;;24519:4;24507:10;24503:21;24497:28;24492:33;;24542:88;24624:4;24612:10;24608:21;24596:9;24593:1;24580:11;24573:33;24569:1;24556:11;24552:19;24549:1;24542:88;;;24647:22;24658:10;24647:22;;;24694:4;;;;24686:12;;;;24715:78;24787:4;24775:10;24771:21;24759:9;24748;24755:1;24748:9;;;24735:11;24728:41;24725:1;24722;24715:78;;;24810:22;24821:10;24810:22;;;25053:44;25091:4;25079:10;25075:21;25066:7;25063:1;25060;25053:44;;;25114:22;25125:10;25114:22;;;25474:11;25467:4;25455:10;25451:21;25444:42;25539:4;25527:10;25517:27;25575:1;25567:6;25564:13;25561:2;;;25642:5;25636:4;25629;25617:10;25613:21;25600:48;25688:3;25676:10;25669:23;25732:5;25720:10;25713:25;25561:2;25786:3;25780:4;25773:17;25820:4;25814;25807:18;16818:9021;25853:154;;;;25933:59;25929:1;25916:15;25912:81;25907:86;;25889:118;;;26021:220;;;;26152:14;26146:4;26139;26133:11;26120:47;26212:14;26205:4;26199:11;26189:38;26184:43;;26062:179;;;;;26255:119;;;;26315:1;26309:4;26302:15;26355:4;26349;26339:21;26334:26;;26284:90;;;;;26509:161;;;;;26570:4;26557:18;26551:24;;26611:4;26598:18;26592:24;;26633:23;26653:2;26649;26633:23;;;26533:137;;;;26683:161;;;;;26744:4;26731:18;26725:24;;26785:4;26772:18;26766:24;;26807:23;26827:2;26823;26807:23;;;26707:137;;;;26857:161;;;;;26918:4;26905:18;26899:24;;26959:4;26946:18;26940:24;;26981:23;27001:2;26997;26981:23;;;26881:137;;;;27031:162;;;;;27092:4;27079:18;27073:24;;27133:5;27120:19;27114:25;;27156:23;27176:2;27172;27156:23;;;27055:138;;;;27206:163;;;;;27267:5;27254:19;27248:25;;27309:5;27296:19;27290:25;;27332:23;27352:2;27348;27332:23;;;27230:139;;;;27382:163;;;;;27443:5;27430:19;27424:25;;27485:5;27472:19;27466:25;;27508:23;27528:2;27524;27508:23;;;27406:139;;;;27558:163;;;;;27619:5;27606:19;27600:25;;27661:5;27648:19;27642:25;;27684:23;27704:2;27700;27684:23;;;27582:139;;;;27734:163;;;;;27795:5;27782:19;27776:25;;27837:5;27824:19;27818:25;;27860:23;27880:2;27876;27860:23;;;27758:139;;;;27910:163;;;;;27971:5;27958:19;27952:25;;28013:5;28000:19;27994:25;;28036:23;28056:2;28052;28036:23;;;27934:139;;;;28086:167;;;;;28151:5;28138:19;28132:25;;28193:5;28180:19;28174:25;;28216:23;28236:2;28232;28216:23;;;28114:139;;;;28266:167;;;;;28331:5;28318:19;28312:25;;28373:5;28360:19;28354:25;;28396:23;28416:2;28412;28396:23;;;28294:139;;;;28446:167;;;;;28511:5;28498:19;28492:25;;28553:5;28540:19;28534:25;;28576:23;28596:2;28592;28576:23;;;28474:139;;;;28626:167;;;;;28691:5;28678:19;28672:25;;28733:5;28720:19;28714:25;;28756:23;28776:2;28772;28756:23;;;28654:139;;;;28806:403;;;28866:66;29094:1;29090:2;29086;29079:17;29075:1;29072;29068;29064:2;29060:1;29056:2;29052;29045:17;29038:32;29031:46;29028:69;29021:77;29018:2;;;29134:3;29128:4;29121:17;29172:4;29166;29159:18;29018:2;28839:370;;;;;29222:96;;;;29298:4;29290:6;29286:17;29273:31;29268:36;;29250:68;;;;;29331:87;;;;29383:21;29397:6;29383:21;;;29378:26;;29360:58;;;;;29431:98;;;;29483:32;29509:4;29501:6;29497:17;29483:32;;;29478:37;;29460:69;;;;;29542:98;;;;29594:32;29620:4;29612:6;29608:17;29594:32;;;29589:37;;29571:69;;;;;29653:98;;;;29705:32;29731:4;29723:6;29719:17;29705:32;;;29700:37;;29682:69;;;;;29764:98;;;;29816:32;29842:4;29834:6;29830:17;29816:32;;;29811:37;;29793:69;;;;;29875:98;;;;29927:32;29953:4;29945:6;29941:17;29927:32;;;29922:37;;29904:69;;;;;29986:98;;;;30038:32;30064:4;30056:6;30052:17;30038:32;;;30033:37;;30015:69;;;;;30097:98;;;;30149:32;30175:4;30167:6;30163:17;30149:32;;;30144:37;;30126:69;;;;;30208:327;;;;30282:8;30269:22;30264:27;;30354:66;30351:1;30347:74;30344:1;30341:81;30336:1;30329:9;30322:17;30318:105;30311:113;30308:2;;;30460:3;30454:4;30447:17;30498:4;30492;30485:18;30308:2;30246:289;;;;;1693:28860",
  "source": "pragma solidity ^0.4.20;\n\n// ######################################################################################\n// Title: Non-Interactive Zero-Knowledge anonymous note protocol validator smart contract\n// Author: Zachary Williamson\n// Confidential and not for public release\n// \n// Disclaimer: This is a technical demo, use at your own risk!\n// ######################################################################################\n\ncontract NizkInterface { // swap ABI with this when using Nizk as a contract\n    function validateSplitTx(bytes32[39]) external pure returns (bytes32[19]) {}\n    function validateJoinTx(bytes32[23]) external pure returns (bytes32[19]) {}\n    function validateCommitTx(bytes32[6]) external pure returns (bytes32[7]) {}\n    function validateRedeemTx(bytes32[10]) external pure returns (bytes32[7]) {}\n    function DEBUG_eccMul(bytes32[3]) external pure returns (bytes32[2]) {}\n    function DEBUG_eccAdd(bytes32[4]) external pure returns (bytes32[2]) {}\n    function DEBUG_pairing(bytes32[8]) external pure returns (bytes32) {}\n}\n\nlibrary NizkInterfaceLibrary { // swap ABI this when using Nizk as a library\n    function validateSplitTx(bytes32[39]) external pure returns (bytes32[19]) {}\n    function validateJoinTx(bytes32[23]) external pure returns (bytes32[19]) {}\n    function validateCommitTx(bytes32[6]) external pure returns (bytes32[7]) {}\n    function validateRedeemTx(bytes32[10]) external pure returns (bytes32[7]) {}\n    function DEBUG_eccMul(bytes32[3]) external pure returns (bytes32[2]) {}\n    function DEBUG_eccAdd(bytes32[4]) external pure returns (bytes32[2]) {}\n    function DEBUG_pairing(bytes32[8]) external pure returns (bytes32) {}\n}\n\ncontract Nizk {\n    function () public {\n        assembly {\n            // ### FUNCTION SELECTOR\n            // -------------------------------------------------------------------\n            switch getFunctionSelector()\n                case 0x75d34641 {   // \"validateSplitTx(bytes32[39]) external\"\n                    validateSplitTx()\n                }\n                case 0xacc8cecd {   // \"validateJoinTx(bytes32[23]) external\"\n                    validateJoinTx()\n                }\n                case 0x814fba66 {   // \"validateRedeemTx(bytes32[10]) external\"\n                    validateRedeemTx()\n                }\n                case 0x91036ec8 {   // \"validateCommitTx(bytes32[6]) external\"\n                    validateCommitTx()\n                }\n                case 0x003ec6b9 {   // \"DEBUG_eccMul(bytes32[3]) external\"\n                    let m := mload(0x40)\n                    eccMul(calldataload(0x04), calldataload(0x24), calldataload(0x44), m)\n                    return(m, 0x40)\n                }\n                case 0x06a791d0 {   // \"DEBUG_eccAdd(bytes32[4]) external\"\n                    let m := mload(0x40)\n                    calldatacopy(m, 0x04, 0x80)\n                    eccCombine(m)\n                    return(m, 0x40)\n                }\n                case 0xdda62ba5 {   // \"DEBUG_pairing(bytes32[8]) external\"\n                    let m := mload(0x40)\n                    calldatacopy(m, 0x04, 0x80)\n                    validatePairing(m, 0x84)\n                    return(m, 0x20)\n                }\n                default {\n                    mstore(0x0, 404) // hey! there's nothing here!\n                    revert(0x0, 0x20)\n                }\n            // -------------------------------------------------------------------\n            // multiply point (x, y) by 's', store result in 'r'\n            function eccMul(x, y, s, r) {\n                let m := mload(0x40)\n                mstore(m, x)\n                mstore(add(m, 0x20), y)\n                mstore(add(m, 0x40), s)\n                if iszero(staticcall(not(0), 7, m, 0x60, r, 0x40)) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n            // add 2 points stored consecutively at 'm', store result in 'm'\n            function eccCombine(m) {\n                if iszero(staticcall(not(0), 6, m, 0x80, m, 0x40)) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n            // evaluate if e(P1, g2y) . e(P2, g2) == 0\n            function validatePairing(points, g2y) {\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let g2y_x_1 := calldataload(g2y) // 0x464\n                let g2y_x_2 := calldataload(add(g2y, 0x20))\n                let g2y_y_1 := calldataload(add(g2y, 0x40))\n                let g2y_y_2 := calldataload(add(g2y, 0x60))\n                // check provided setup pubkey is not zero or g2\n                if or(or(or(or(or(or(or(\n                    iszero(g2y_x_1),\n                    iszero(g2y_x_2)),\n                    iszero(g2y_y_1)),\n                    iszero(g2y_y_2)),\n                    eq(g2y_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)),\n                    eq(g2y_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)),\n                    eq(g2y_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)),\n                    eq(g2y_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n                {\n                    mstore(0x00, 500)\n                    revert(0x00, 0x20)\n                }\n                let x_1 := mload(points)\n                let y_1 := mload(add(points, 0x20))\n                let x_2 := mload(add(points, 0x40))\n                let y_2 := mload(add(points, 0x60))\n\n                // store coords in memory\n                // indices are a bit off, scipr lab's libff limb ordering (c0, c1) is opposite to what precompile expects\n                let m := mload(0x40)\n                mstore(m, x_1)\n                mstore(add(m, 0x20), y_1)\n                mstore(add(m, 0x60), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n                mstore(add(m, 0x40), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n                mstore(add(m, 0xa0), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n                mstore(add(m, 0x80), 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n                mstore(add(m, 0xc0), x_2)\n                mstore(add(m, 0xe0), y_2)\n                mstore(add(m, 0x120), g2y_x_1)\n                mstore(add(m, 0x100), g2y_x_2)\n                mstore(add(m, 0x160), g2y_y_1)\n                mstore(add(m, 0x140), g2y_y_2)\n                let success := staticcall(not(0), 8, m, 0x180, m, 0x20)\n                if or(iszero(success), iszero(mload(m))) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n\n            function validateCommitTx() {\n                // calldata map\n                // 0x00 - 0x04: function signature\n                // 0x04 - 0x24: address of sender\n                // 0x24 - 0x64: s_1\n                // 0x64 - 0x84: k (public)\n                // 0x84 - 0xa4: b_1 (signature)\n                // 0xa4 - 0xc4: c (hash)\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let c := calldataload(0xa4)\n                let o := 0x84\n                let pointCache := mload(0x40)\n                mstore(0x40, add(pointCache, 0x80)) // reserve 4 words of memory\n                if iszero(eq(calldatasize, 0xc4)) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // ### calculate g^{b_{1}}.s_{1}^{-c.x_{1}} = B\n                let x := calldataload(0x24)\n                let y := calldataload(0x44)\n                checkWellFormed(x, y)\n\n                eccMul(x, sub(field_order, y), c, pointCache)\n                eccMul(1, 2, sig_b1(o), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### validate B\n                mstore(add(pointCache, 0x60), mload(pointCache))\n                mstore(add(pointCache, 0x80), mload(add(pointCache, 0x20)))\n                calldatacopy(pointCache, 0x04, 0x60)\n                // memory map:\n                // 0x00 - 0x20: message sender\n                // 0x20 - 0x60: s_{1}\n                // 0x60 - 0xa0: B\n                let result := keccak256(pointCache, 0xa0)\n                if eq(result, c) {\n                    // calculate and store c: g^{k}.s_{1}\n                    eccMul(1, 2, sig_k(o), add(pointCache, 0x20))\n                    mstore(add(pointCache, 0x60), x)\n                    mstore(add(pointCache, 0x80), y)\n                    eccCombine(add(pointCache, 0x20))\n                    // store d: g\n                    mstore(add(pointCache, 0x60), 0x1)\n                    mstore(add(pointCache, 0x80), 0x2)\n                    // store s\n                    calldatacopy(add(pointCache, 0xa0), 0x24, 0x40)\n                    mstore(pointCache, 0x1)\n                    return(pointCache, 0xe0)\n                }\n\n                mstore(0x00, 403)\n                revert(0x00, 0x20)\n            }\n\n            function validateRedeemTx() {\n                // calldata map\n                // 0x00 - 0x04: function signature\n                // 0x04 - 0x24: address of sender\n                // 0x24 - 0xe4: c_1, d_1, s_1\n                // 0xe4 - 0x104: k (public)\n                // 0x104 - 0x124: b_1 (signature)\n                // 0x124 - 0x144: c (hash)\n\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let c := calldataload(0x124)\n                let o := 0x104 // offset to get signature\n                let runningHash := hashInputs(0x100) // 3 points + sender address + k = 8 words, 256 (0x100) bytes\n\n                let pointCache := mload(0x40)\n                mstore(0x40, add(pointCache, 0x80)) // reserve 4 words of memory\n\n                if iszero(eq(calldatasize, 0x144)) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // ### calculate s_{1}^{-c.x_{1}}\n                let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n                let x, y := s1()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate c_{1}^{-c.x_{2}}\n                gScalar := addmod(gScalar, mulmod(c, mulmod(runningHash, sig_k(o), gen_order), gen_order), gen_order)\n                x, y := c1()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                x, y := d1()\n                eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### calculate generator exponentiation\n                // exponent: b_{1}.x_{1} + k.c.x_{2}\n                eccMul(1, 2, gScalar, add(pointCache, 0x40))\n                eccCombine(pointCache) // get resulting point, the blinding factor\n\n                // validate calculated blinding factor B was provided as an input into original hash 'c'\n                // memory map:\n                // 0x00 - 0x20: B.x\n                // 0x20 - 0x40: B.y\n                // 0x40 - 0x60: x_{2}\n                mstore(add(pointCache, 0x40), runningHash)\n                let result := keccak256(pointCache, 0x60)\n                if eq(result, c) {\n                    calldatacopy(add(pointCache, 0x20), 0x24, 0xe0)\n                    mstore(pointCache, 0x1)\n                    return(pointCache, 0xe0)\n                }\n                mstore(0x00, 403)\n                revert(0x00, 0x20)\n            }\n            function validateJoinTx() {\n                // calldata map\n                // 0x00 - 0x04: function signature\n                // 0x04 - 0x24: address of sender. Could get via 'caller' but would rely on contract being called via delegateCall\n                // 0x24 - 0xe4: c_1, d_1, s_1 (input note a)\n                // 0xe4 - 0x1a4: c_2, d_2, s_1 (input note a)\n                // 0x1a4 - 0x264: c_3, d_3, s_3 (output note b)\n                // 0x264 - 0x2c4: b_1, b_2, a_3 (signatures)\n                // 0x2c4 - 0x2e4: c (hash)\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let c := calldataload(0x2c4)\n                let o := 0x264 // offset to get signatures\n                let runningHash := hashInputs(0x260) // 9 points + sender address = 19 words, 608 (0x260) bytes\n                let pointCache := mload(0x40)\n                mstore(0x40, add(pointCache, 0xc0)) // reserve 6 words of memory\n                if iszero(eq(calldatasize, 0x2e4)) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // ### calculate s_{1}^{-c.x_{1}}\n                let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n                let x, y := s1()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate s_{2}^{-c.x_{2}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_b2(o), gen_order), gen_order)\n                x, y := s2()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate d_{3}^{-c.x_{3}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n                x, y := d3()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate (c_{1}.c_{2}.c_{3}^{-1})^{-c.x_{4}}\n                x, y := c1()\n                mstore(add(pointCache, 0x40), x)\n                mstore(add(pointCache, 0x60), sub(field_order,y))\n                x, y := c2()\n                mstore(add(pointCache, 0x80), x)\n                mstore(add(pointCache, 0xa0), sub(field_order,y))\n                eccCombine(add(pointCache, 0x40))\n                x, y := c3()\n                mstore(add(pointCache, 0x80), x)\n                mstore(add(pointCache, 0xa0), y)\n                eccCombine(add(pointCache, 0x40))\n                \n                x := mload(add(pointCache, 0x40))\n                y := mload(add(pointCache, 0x60))\n                eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### calculate d_{1}^{b_{1}.x_{4}}\n                x, y := d1()\n                eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### calculate d_{2}^{b_{2}.x_{4}}\n                x, y := d2()\n                eccMul(x, y, mulmod(runningHash, sig_b2(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                \n                // ### calculate s_{3}^{-a_{3}.x_{4}}\n                x, y := s3()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### calculate generator exponentiation\n                // exponent: b_{1}.x_{1} + b_{2}.x_{2} + a_{3}.x_{3}\n                eccMul(1, 2, gScalar, add(pointCache, 0x40))\n                eccCombine(pointCache) // get resulting point, the blinding factor\n\n                // validate calculated blinding factor B was provided as an input into original hash 'c'\n                // memory map:\n                // 0x00 - 0x20: B.x\n                // 0x20 - 0x40: B.y\n                // 0x40 - 0x60: x_{4}\n                mstore(add(pointCache, 0x40), runningHash)\n                let result := keccak256(pointCache, 0x60)\n                if eq(result, c) {\n                    calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n                    mstore(pointCache, 0x1)\n                    return(pointCache, 0x260)\n                }\n                mstore(0x00, 403)\n                revert(0x00, 0x20)\n            }\n            function validateSplitTx() {\n                // calldata map:\n                // 0x00 - 0x04: function signature\n                // 0x04 - 0x24: address of sender. Could get via 'caller' but would rely on contract being called via delegateCall\n                // 0x24 - 0xe4: c_1, d_1, s_1 (input note)\n                // 0xe4 - 0x1a4: c_2, d_2, s_1 (output note a)\n                // 0x1a4 - 0x264: c_3, d_3, s_3 (output note b)\n                // 0x264 - 0x2e4: gamma_1, sigma_1 (bb sigs for note a)\n                // 0x2e4 - 0x364: gamma_2, sigma_2 (bb sigs for note b)\n                // 0x364 - 0x444: b_1, a_2, a_3, k_2, k_3, r_2, r_3 (signatures)\n                // 0x444 - 0x464: c (hash)\n                // 0x464 - 0x4a4: g2y_x\n                // 0x4a4 - 0x4e4: g2y_y\n                if iszero(eq(calldatasize, 0x4e4)) { // assert calldatasize is correct\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let c := calldataload(0x444)\n                let o := 0x364 // offset in calldata to get signature\n                let runningHash := hashInputs(0x360) // 13 points + sender address = 27 words, 864 (0x360) bytes\n                let pointCache := mload(0x40)\n                mstore(0x40, add(pointCache, 0xc0)) // reserve 12 words of memory\n                // total memory use 28 words: 12 + 12 words for pairing + initial memory reserved by solitity (4 words)\n\n                // validate bilinear pairing between gamma_{1}, gamma_{2} and sigma_{1}, sigma_{2}\n                // we can re-use calculated sigma values in Sigma protocol\n                let x, y := sigma1()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n                x, y := gamma1()\n                eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x80))\n                let temp := runningHash // cache old hash, needed for gamma_1^{-k_{2}}\n                runningHash := advanceHash(runningHash)\n\n                x, y := sigma2()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                // memory map:\n                // 0x00-0x40: sigma_{1}^{cx_1}\n                // 0x40-0x80: sigma_{2}^{cx_2}\n                // 0x80-0xc0: gamma_{1}^{cx_1}\n                eccCombine(pointCache) // add sigma_{1}, sigma_{2} together at index 0x00\n\n                x, y := gamma2()\n                eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(add(pointCache, 0x40)) // add gamma_{1}, gamma_{2} together at index 0x40\n\n                // memory map: \n                // 0x00-0x40: sigma_{1}^{cx_1} + sigma_{2}^{cx_2}\n                // 0x40-0x80: gamma_{1}^{cx_1} + gamma_{2}^{cx_2}\n                x := mload(pointCache)\n                y := mload(add(pointCache, 0x20))\n                validatePairing(pointCache, 0x464) // 464 is offset in calldata to get g2y\n\n                // add sigma_{1}^(cx_1) + sigma_{2}^(cx_2) back into memory\n                mstore(pointCache, x)\n                mstore(add(pointCache, 0x20), y)\n\n                // ### calculate gamma_1^{-k_{2}.x_{1}}.gamma_2^{-k_{3}.x_{2}}\n                let gScalar := mulmod(temp, sig_r1(o), gen_order)\n                x, y := gamma1()\n                eccMul(x, sub(field_order, y), mulmod(temp, sig_k2(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_r2(o), gen_order), gen_order)\n                x, y := gamma2()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, sig_k3(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate s_{1}^{-c.x_{3}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_b1(o), gen_order), gen_order)\n                x, y := s1()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate d_{2}^{-c.x_{4}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_a2(o), gen_order), gen_order)\n                x, y := d2()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate d_{3}^{-c.x_{5}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n                x, y := d3()\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate (c_{2}.g)^{-c.x_{6}}.s_{2}^{a_{2}.x_{6}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n                x, y := c2()\n                mstore(add(pointCache, 0x40), x)\n                mstore(add(pointCache, 0x60), y)\n                mstore(add(pointCache, 0x80), 1)\n                mstore(add(pointCache, 0xa0), 2)\n                eccCombine(add(pointCache, 0x40))\n                x := mload(add(pointCache, 0x40))\n                y := mload(add(pointCache, 0x60))\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                x, y := s2()\n                eccMul(x, y, mulmod(runningHash, sig_a2(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate (c_{3}.g)^{-c.x_{7}}.s_{3}^{a_{3}.x_{7}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n                x, y := c3()\n                mstore(add(pointCache, 0x40), x)\n                mstore(add(pointCache, 0x60), y)\n                mstore(add(pointCache, 0x80), 1)\n                mstore(add(pointCache, 0xa0), 2)\n                eccCombine(add(pointCache, 0x40))\n                x := mload(add(pointCache, 0x40))\n                y := mload(add(pointCache, 0x60))\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                x, y := s3()\n                eccMul(x, y, mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                runningHash := advanceHash(runningHash)\n\n                // ### calculate (c_{1}.g)^{-c.x_{8}}.d_{1}^{b_{1}.x_{8}}\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n                gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n                x, y := c1()\n                mstore(add(pointCache, 0x40), x)\n                mstore(add(pointCache, 0x60), y)\n                mstore(add(pointCache, 0x80), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd3)  // 2G\n                mstore(add(pointCache, 0xa0), 0x15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4)\n                eccCombine(add(pointCache, 0x40))\n                x := mload(add(pointCache, 0x40))\n                y := mload(add(pointCache, 0x60))\n                eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n                x, y := d1()\n                eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n                eccCombine(pointCache)\n\n                // ### calculate generator exponentiation\n                // exponent: r_{1}.x_{1} + r_{2}.x_{2} + b_{1}.x_{3} + a_{2}.x_{4} + a_{3}.x_{5} + k_{2}.(x_{6} + x_{8}) + k_{3}.(x_{7} + x_{8})\n                eccMul(1, 2, gScalar, add(pointCache, 0x40))\n                eccCombine(pointCache) // get resulting point, the blinding factor\n\n                // validate calculated blinding factor B was provided as an input into original hash 'c'\n                // memory map:\n                // 0x00 - 0x20: B.x\n                // 0x20 - 0x40: B.y\n                // 0x40 - 0x60: x_{8}\n                mstore(add(pointCache, 0x40), runningHash)\n                let result := keccak256(pointCache, 0x60)\n                if eq(result, c) {\n                    calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n                    mstore(pointCache, 0x1)\n                    return(pointCache, 0x260)\n                }\n                mstore(0x00, 403)\n                revert(0x00, 0x20)\n            }\n\n            function getFunctionSelector() -> v {\n                v := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)\n            }\n\n            function hashInputs(commitmentSize) -> v {\n                // copy from bytes 0x04\n                calldatacopy(mload(0x40), 0x04, commitmentSize)\n                v := keccak256(mload(0x40), commitmentSize)\n            }\n\n            function advanceHash(h) -> r {\n                mstore(0x00, h)\n                r := keccak256(0x00, 0x20)\n            }\n\n            // Can't reference constants with inline assembly and don't want to directly ref calldata offsets so...yeesh\n            function c1() -> px, py {\n                px := calldataload(0x24)\n                py := calldataload(0x44)\n                checkWellFormed(px, py)\n            }\n            function d1() -> px, py {\n                px := calldataload(0x64)\n                py := calldataload(0x84)\n                checkWellFormed(px, py)\n            }\n            function s1() -> px, py {\n                px := calldataload(0xa4)\n                py := calldataload(0xc4)\n                checkWellFormed(px, py)\n            }\n            function c2() -> px, py {\n                px := calldataload(0xe4)\n                py := calldataload(0x104)\n                checkWellFormed(px, py)\n            }\n            function d2() -> px, py {\n                px := calldataload(0x124)\n                py := calldataload(0x144)\n                checkWellFormed(px, py)\n            }\n            function s2() -> px, py {\n                px := calldataload(0x164)\n                py := calldataload(0x184)\n                checkWellFormed(px, py)\n            }\n            function c3() -> px, py {\n                px := calldataload(0x1a4)\n                py := calldataload(0x1c4)\n                checkWellFormed(px, py)\n            }\n            function d3() -> px, py {\n                px := calldataload(0x1e4)\n                py := calldataload(0x204)\n                checkWellFormed(px, py)\n            }\n            function s3() -> px, py {\n                px := calldataload(0x224)\n                py := calldataload(0x244)\n                checkWellFormed(px, py)\n            }\n            function gamma1() -> px, py {\n                px := calldataload(0x264)\n                py := calldataload(0x284)\n                checkWellFormed(px, py)\n            }\n            function sigma1() -> px, py {\n                px := calldataload(0x2a4)\n                py := calldataload(0x2c4)\n                checkWellFormed(px, py)\n            }\n            function gamma2() -> px, py {\n                px := calldataload(0x2e4)\n                py := calldataload(0x304)\n                checkWellFormed(px, py)\n            }\n            function sigma2() -> px, py {\n                px := calldataload(0x324)\n                py := calldataload(0x344)\n                checkWellFormed(px, py)\n            }\n            function checkWellFormed(px, py) {\n                let p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                // assert point is on bn_128 curve y^{2} = x^{3} + 3\n                if iszero(eq(addmod(mulmod(mulmod(px, px, p), px, p), 3, p), mulmod(py, py, p))) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n            function sig_k(offset) -> v {\n                v := calldataload(sub(offset, 0x20))\n            }\n            function sig_b1(offset) -> v {\n                v := loadSignature(offset)\n            }\n            function sig_b2(offset) -> v {\n                v := loadSignature(add(offset, 0x20))\n            }\n            function sig_a2(offset) -> v {\n                v := loadSignature(add(offset, 0x20))\n            }\n            function sig_a3(offset) -> v {\n                v := loadSignature(add(offset, 0x40))\n            }\n            function sig_k2(offset) -> v {\n                v := loadSignature(add(offset, 0x60))\n            }\n            function sig_k3(offset) -> v {\n                v := loadSignature(add(offset, 0x80))\n            }\n            function sig_r1(offset) -> v {\n                v := loadSignature(add(offset, 0xa0))\n            }\n            function sig_r2(offset) -> v {\n                v := loadSignature(add(offset, 0xc0))\n            }\n            function loadSignature(location) -> v {\n                v := calldataload(location)\n                if iszero(and(iszero(iszero(v)), eq(v, mod(v, 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001)))) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n        }\n    }\n}",
  "sourcePath": "/mnt/c/Users/zacha/CreditMint/Projects/smart-contracts/contracts/lib/AZTEC/old/NIZK.sol",
  "ast": {
    "absolutePath": "/mnt/c/Users/zacha/CreditMint/Projects/smart-contracts/contracts/lib/AZTEC/old/NIZK.sol",
    "exportedSymbols": {
      "Nizk": [
        175
      ],
      "NizkInterface": [
        86
      ],
      "NizkInterfaceLibrary": [
        169
      ]
    },
    "id": 176,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 86,
        "linearizedBaseContracts": [
          86
        ],
        "name": "NizkInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 14,
              "nodeType": "Block",
              "src": "592:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 15,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateSplitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "543:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$39_calldata_ptr",
                    "typeString": "bytes32[39]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "543:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 6,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3339",
                      "id": 5,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "551:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "39"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "543:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$39_storage_ptr",
                      "typeString": "bytes32[39]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "542:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "579:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 9,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "579:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 11,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 10,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "587:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "579:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "578:13:2"
            },
            "scope": 86,
            "src": "518:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26,
              "nodeType": "Block",
              "src": "672:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 27,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateJoinTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 27,
                  "src": "623:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$23_calldata_ptr",
                    "typeString": "bytes32[23]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "623:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 18,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3233",
                      "id": 17,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "631:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "23"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "623:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$23_storage_ptr",
                      "typeString": "bytes32[23]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "622:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 27,
                  "src": "659:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 21,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "659:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 23,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "667:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "659:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "658:13:2"
            },
            "scope": 86,
            "src": "599:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 38,
              "nodeType": "Block",
              "src": "752:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 39,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateCommitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "705:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$6_calldata_ptr",
                    "typeString": "bytes32[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "705:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 30,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "713:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "705:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$6_storage_ptr",
                      "typeString": "bytes32[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "704:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "740:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 33,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "740:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 35,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 34,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "748:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "740:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "739:12:2"
            },
            "scope": 86,
            "src": "679:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 50,
              "nodeType": "Block",
              "src": "833:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 51,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateRedeemTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "785:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$10_calldata_ptr",
                    "typeString": "bytes32[10]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 40,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "785:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 42,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3130",
                      "id": 41,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "793:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "10"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "785:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
                      "typeString": "bytes32[10]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "784:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "821:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 45,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "821:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 47,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 46,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "829:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "821:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "820:12:2"
            },
            "scope": 86,
            "src": "759:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 62,
              "nodeType": "Block",
              "src": "909:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 63,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccMul",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "862:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$3_calldata_ptr",
                    "typeString": "bytes32[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 52,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "862:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 54,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "33",
                      "id": 53,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "870:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "862:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$3_storage_ptr",
                      "typeString": "bytes32[3]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "861:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "897:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "897:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 59,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "905:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "897:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "896:12:2"
            },
            "scope": 86,
            "src": "840:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "985:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccAdd",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "938:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$4_calldata_ptr",
                    "typeString": "bytes32[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 64,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "938:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 66,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "34",
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "946:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "938:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$4_storage_ptr",
                      "typeString": "bytes32[4]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "937:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 73,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "973:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 69,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "973:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 71,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 70,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "981:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "973:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "972:12:2"
            },
            "scope": 86,
            "src": "916:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 84,
              "nodeType": "Block",
              "src": "1059:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 85,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_pairing",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "1015:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$8_calldata_ptr",
                    "typeString": "bytes32[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1015:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 78,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 77,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1023:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1015:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$8_storage_ptr",
                      "typeString": "bytes32[8]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1014:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "1050:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1050:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1049:9:2"
            },
            "scope": 86,
            "src": "992:69:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 176,
        "src": "437:626:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 169,
        "linearizedBaseContracts": [
          169
        ],
        "name": "NizkInterfaceLibrary",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 97,
              "nodeType": "Block",
              "src": "1220:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 98,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateSplitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 90,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "1171:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$39_calldata_ptr",
                    "typeString": "bytes32[39]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 87,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1171:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 89,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3339",
                      "id": 88,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1179:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "39"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1171:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$39_storage_ptr",
                      "typeString": "bytes32[39]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1170:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 96,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 95,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "1207:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 92,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1207:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 94,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 93,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1215:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1207:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1206:13:2"
            },
            "scope": 169,
            "src": "1146:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 109,
              "nodeType": "Block",
              "src": "1300:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 110,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateJoinTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 102,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 110,
                  "src": "1251:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$23_calldata_ptr",
                    "typeString": "bytes32[23]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 99,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1251:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 101,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3233",
                      "id": 100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1259:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "23"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1251:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$23_storage_ptr",
                      "typeString": "bytes32[23]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1250:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 110,
                  "src": "1287:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 104,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1287:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 106,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 105,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1295:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1287:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1286:13:2"
            },
            "scope": 169,
            "src": "1227:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 121,
              "nodeType": "Block",
              "src": "1380:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 122,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateCommitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 115,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 114,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 122,
                  "src": "1333:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$6_calldata_ptr",
                    "typeString": "bytes32[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 111,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1333:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 113,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1341:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1333:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$6_storage_ptr",
                      "typeString": "bytes32[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1332:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 119,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 122,
                  "src": "1368:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 116,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1368:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 118,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1376:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1368:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1367:12:2"
            },
            "scope": 169,
            "src": "1307:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 133,
              "nodeType": "Block",
              "src": "1461:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 134,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateRedeemTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 134,
                  "src": "1413:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$10_calldata_ptr",
                    "typeString": "bytes32[10]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 123,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1413:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3130",
                      "id": 124,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1421:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "10"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1413:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
                      "typeString": "bytes32[10]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1412:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 131,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 134,
                  "src": "1449:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 128,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1449:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 130,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1457:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1449:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1448:12:2"
            },
            "scope": 169,
            "src": "1387:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 145,
              "nodeType": "Block",
              "src": "1537:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 146,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccMul",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 138,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 146,
                  "src": "1490:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$3_calldata_ptr",
                    "typeString": "bytes32[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 135,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1490:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 137,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "33",
                      "id": 136,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1498:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1490:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$3_storage_ptr",
                      "typeString": "bytes32[3]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1489:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 143,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 146,
                  "src": "1525:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 140,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1525:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 142,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 141,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1533:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1525:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1524:12:2"
            },
            "scope": 169,
            "src": "1468:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 157,
              "nodeType": "Block",
              "src": "1613:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 158,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccAdd",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 150,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "1566:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$4_calldata_ptr",
                    "typeString": "bytes32[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 147,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1566:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 149,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "34",
                      "id": 148,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1574:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1566:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$4_storage_ptr",
                      "typeString": "bytes32[4]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1565:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 155,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "1601:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 152,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1601:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 154,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 153,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1609:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1601:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1600:12:2"
            },
            "scope": 169,
            "src": "1544:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 167,
              "nodeType": "Block",
              "src": "1687:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 168,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_pairing",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 162,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "1643:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$8_calldata_ptr",
                    "typeString": "bytes32[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 159,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1643:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 161,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1651:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1643:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$8_storage_ptr",
                      "typeString": "bytes32[8]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1642:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 165,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "1678:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 164,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1678:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1677:9:2"
            },
            "scope": 169,
            "src": "1620:69:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 176,
        "src": "1065:626:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 175,
        "linearizedBaseContracts": [
          175
        ],
        "name": "Nizk",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 173,
              "nodeType": "Block",
              "src": "1732:28819:2",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 172,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    switch getFunctionSelector()\n    case 0x75d34641 {\n        validateSplitTx()\n    }\n    case 0xacc8cecd {\n        validateJoinTx()\n    }\n    case 0x814fba66 {\n        validateRedeemTx()\n    }\n    case 0x91036ec8 {\n        validateCommitTx()\n    }\n    case 0x003ec6b9 {\n        let m := mload(0x40)\n        eccMul(calldataload(0x04), calldataload(0x24), calldataload(0x44), m)\n        return(m, 0x40)\n    }\n    case 0x06a791d0 {\n        let m := mload(0x40)\n        calldatacopy(m, 0x04, 0x80)\n        eccCombine(m)\n        return(m, 0x40)\n    }\n    case 0xdda62ba5 {\n        let m := mload(0x40)\n        calldatacopy(m, 0x04, 0x80)\n        validatePairing(m, 0x84)\n        return(m, 0x20)\n    }\n    default {\n        mstore(0x0, 404)\n        revert(0x0, 0x20)\n    }\n    function eccMul(x, y, s, r)\n    {\n        let m := mload(0x40)\n        mstore(m, x)\n        mstore(add(m, 0x20), y)\n        mstore(add(m, 0x40), s)\n        if iszero(staticcall(not(0), 7, m, 0x60, r, 0x40))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function eccCombine(m)\n    {\n        if iszero(staticcall(not(0), 6, m, 0x80, m, 0x40))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(points, g2y)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let g2y_x_1 := calldataload(g2y)\n        let g2y_x_2 := calldataload(add(g2y, 0x20))\n        let g2y_y_1 := calldataload(add(g2y, 0x40))\n        let g2y_y_2 := calldataload(add(g2y, 0x60))\n        if or(or(or(or(or(or(or(iszero(g2y_x_1), iszero(g2y_x_2)), iszero(g2y_y_1)), iszero(g2y_y_2)), eq(g2y_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(g2y_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(g2y_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(g2y_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 500)\n            revert(0x00, 0x20)\n        }\n        let x_1 := mload(points)\n        let y_1 := mload(add(points, 0x20))\n        let x_2 := mload(add(points, 0x40))\n        let y_2 := mload(add(points, 0x60))\n        let m := mload(0x40)\n        mstore(m, x_1)\n        mstore(add(m, 0x20), y_1)\n        mstore(add(m, 0x60), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(add(m, 0x40), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(add(m, 0xa0), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(add(m, 0x80), 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(add(m, 0xc0), x_2)\n        mstore(add(m, 0xe0), y_2)\n        mstore(add(m, 0x120), g2y_x_1)\n        mstore(add(m, 0x100), g2y_x_2)\n        mstore(add(m, 0x160), g2y_y_1)\n        mstore(add(m, 0x140), g2y_y_2)\n        let success := staticcall(not(0), 8, m, 0x180, m, 0x20)\n        if or(iszero(success), iszero(mload(m)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0xa4)\n        let o := 0x84\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0x80))\n        if iszero(eq(calldatasize(), 0xc4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let x := calldataload(0x24)\n        let y := calldataload(0x44)\n        checkWellFormed(x, y)\n        eccMul(x, sub(field_order, y), c, pointCache)\n        eccMul(1, 2, sig_b1(o), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x60), mload(pointCache))\n        mstore(add(pointCache, 0x80), mload(add(pointCache, 0x20)))\n        calldatacopy(pointCache, 0x04, 0x60)\n        let result := keccak256(pointCache, 0xa0)\n        if eq(result, c)\n        {\n            eccMul(1, 2, sig_k(o), add(pointCache, 0x20))\n            mstore(add(pointCache, 0x60), x)\n            mstore(add(pointCache, 0x80), y)\n            eccCombine(add(pointCache, 0x20))\n            mstore(add(pointCache, 0x60), 0x1)\n            mstore(add(pointCache, 0x80), 0x2)\n            calldatacopy(add(pointCache, 0xa0), 0x24, 0x40)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0xe0)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateRedeemTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x124)\n        let o := 0x104\n        let runningHash := hashInputs(0x100)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0x80))\n        if iszero(eq(calldatasize(), 0x144))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n        let x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(c, mulmod(runningHash, sig_k(o), gen_order), gen_order), gen_order)\n        x, y := c1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0xe0)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0xe0)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateJoinTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x2c4)\n        let o := 0x264\n        let runningHash := hashInputs(0x260)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0xc0))\n        if iszero(eq(calldatasize(), 0x2e4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n        let x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_b2(o), gen_order), gen_order)\n        x, y := s2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n        x, y := d3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        x, y := c1()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), sub(field_order, y))\n        x, y := c2()\n        mstore(add(pointCache, 0x80), x)\n        mstore(add(pointCache, 0xa0), sub(field_order, y))\n        eccCombine(add(pointCache, 0x40))\n        x, y := c3()\n        mstore(add(pointCache, 0x80), x)\n        mstore(add(pointCache, 0xa0), y)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d2()\n        eccMul(x, y, mulmod(runningHash, sig_b2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0x260)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateSplitTx()\n    {\n        if iszero(eq(calldatasize(), 0x4e4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x444)\n        let o := 0x364\n        let runningHash := hashInputs(0x360)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0xc0))\n        let x, y := sigma1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        x, y := gamma1()\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x80))\n        let temp := runningHash\n        runningHash := advanceHash(runningHash)\n        x, y := sigma2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := gamma2()\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(add(pointCache, 0x40))\n        x := mload(pointCache)\n        y := mload(add(pointCache, 0x20))\n        validatePairing(pointCache, 0x464)\n        mstore(pointCache, x)\n        mstore(add(pointCache, 0x20), y)\n        let gScalar := mulmod(temp, sig_r1(o), gen_order)\n        x, y := gamma1()\n        eccMul(x, sub(field_order, y), mulmod(temp, sig_k2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_r2(o), gen_order), gen_order)\n        x, y := gamma2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, sig_k3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_b1(o), gen_order), gen_order)\n        x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a2(o), gen_order), gen_order)\n        x, y := d2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n        x, y := d3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n        x, y := c2()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 1)\n        mstore(add(pointCache, 0xa0), 2)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s2()\n        eccMul(x, y, mulmod(runningHash, sig_a2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n        x, y := c3()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 1)\n        mstore(add(pointCache, 0xa0), 2)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s3()\n        eccMul(x, y, mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n        x, y := c1()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd3)\n        mstore(add(pointCache, 0xa0), 0x15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0x260)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function getFunctionSelector() -> v\n    {\n        v := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)\n    }\n    function hashInputs(commitmentSize) -> v\n    {\n        calldatacopy(mload(0x40), 0x04, commitmentSize)\n        v := keccak256(mload(0x40), commitmentSize)\n    }\n    function advanceHash(h) -> r\n    {\n        mstore(0x00, h)\n        r := keccak256(0x00, 0x20)\n    }\n    function c1() -> px, py\n    {\n        px := calldataload(0x24)\n        py := calldataload(0x44)\n        checkWellFormed(px, py)\n    }\n    function d1() -> px, py\n    {\n        px := calldataload(0x64)\n        py := calldataload(0x84)\n        checkWellFormed(px, py)\n    }\n    function s1() -> px, py\n    {\n        px := calldataload(0xa4)\n        py := calldataload(0xc4)\n        checkWellFormed(px, py)\n    }\n    function c2() -> px, py\n    {\n        px := calldataload(0xe4)\n        py := calldataload(0x104)\n        checkWellFormed(px, py)\n    }\n    function d2() -> px, py\n    {\n        px := calldataload(0x124)\n        py := calldataload(0x144)\n        checkWellFormed(px, py)\n    }\n    function s2() -> px, py\n    {\n        px := calldataload(0x164)\n        py := calldataload(0x184)\n        checkWellFormed(px, py)\n    }\n    function c3() -> px, py\n    {\n        px := calldataload(0x1a4)\n        py := calldataload(0x1c4)\n        checkWellFormed(px, py)\n    }\n    function d3() -> px, py\n    {\n        px := calldataload(0x1e4)\n        py := calldataload(0x204)\n        checkWellFormed(px, py)\n    }\n    function s3() -> px, py\n    {\n        px := calldataload(0x224)\n        py := calldataload(0x244)\n        checkWellFormed(px, py)\n    }\n    function gamma1() -> px, py\n    {\n        px := calldataload(0x264)\n        py := calldataload(0x284)\n        checkWellFormed(px, py)\n    }\n    function sigma1() -> px, py\n    {\n        px := calldataload(0x2a4)\n        py := calldataload(0x2c4)\n        checkWellFormed(px, py)\n    }\n    function gamma2() -> px, py\n    {\n        px := calldataload(0x2e4)\n        py := calldataload(0x304)\n        checkWellFormed(px, py)\n    }\n    function sigma2() -> px, py\n    {\n        px := calldataload(0x324)\n        py := calldataload(0x344)\n        checkWellFormed(px, py)\n    }\n    function checkWellFormed(px, py)\n    {\n        let p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        if iszero(eq(addmod(mulmod(mulmod(px, px, p), px, p), 3, p), mulmod(py, py, p)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function sig_k(offset) -> v\n    {\n        v := calldataload(sub(offset, 0x20))\n    }\n    function sig_b1(offset) -> v\n    {\n        v := loadSignature(offset)\n    }\n    function sig_b2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x20))\n    }\n    function sig_a2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x20))\n    }\n    function sig_a3(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x40))\n    }\n    function sig_k2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x60))\n    }\n    function sig_k3(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x80))\n    }\n    function sig_r1(offset) -> v\n    {\n        v := loadSignature(add(offset, 0xa0))\n    }\n    function sig_r2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0xc0))\n    }\n    function loadSignature(location) -> v\n    {\n        v := calldataload(location)\n        if iszero(and(iszero(iszero(v)), eq(v, mod(v, 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n}",
                  "src": "1742:28809:2"
                }
              ]
            },
            "documentation": null,
            "id": 174,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 170,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1722:2:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:0:2"
            },
            "scope": 175,
            "src": "1713:28838:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 176,
        "src": "1693:28860:2"
      }
    ],
    "src": "0:30553:2"
  },
  "legacyAST": {
    "absolutePath": "/mnt/c/Users/zacha/CreditMint/Projects/smart-contracts/contracts/lib/AZTEC/old/NIZK.sol",
    "exportedSymbols": {
      "Nizk": [
        175
      ],
      "NizkInterface": [
        86
      ],
      "NizkInterfaceLibrary": [
        169
      ]
    },
    "id": 176,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 86,
        "linearizedBaseContracts": [
          86
        ],
        "name": "NizkInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 14,
              "nodeType": "Block",
              "src": "592:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 15,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateSplitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "543:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$39_calldata_ptr",
                    "typeString": "bytes32[39]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "543:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 6,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3339",
                      "id": 5,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "551:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "39"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "543:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$39_storage_ptr",
                      "typeString": "bytes32[39]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "542:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "579:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 9,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "579:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 11,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 10,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "587:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "579:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "578:13:2"
            },
            "scope": 86,
            "src": "518:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26,
              "nodeType": "Block",
              "src": "672:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 27,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateJoinTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 27,
                  "src": "623:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$23_calldata_ptr",
                    "typeString": "bytes32[23]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "623:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 18,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3233",
                      "id": 17,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "631:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "23"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "623:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$23_storage_ptr",
                      "typeString": "bytes32[23]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "622:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 27,
                  "src": "659:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 21,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "659:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 23,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "667:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "659:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "658:13:2"
            },
            "scope": 86,
            "src": "599:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 38,
              "nodeType": "Block",
              "src": "752:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 39,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateCommitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "705:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$6_calldata_ptr",
                    "typeString": "bytes32[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "705:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 30,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "713:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "705:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$6_storage_ptr",
                      "typeString": "bytes32[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "704:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "740:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 33,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "740:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 35,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 34,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "748:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "740:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "739:12:2"
            },
            "scope": 86,
            "src": "679:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 50,
              "nodeType": "Block",
              "src": "833:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 51,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateRedeemTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "785:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$10_calldata_ptr",
                    "typeString": "bytes32[10]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 40,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "785:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 42,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3130",
                      "id": 41,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "793:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "10"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "785:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
                      "typeString": "bytes32[10]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "784:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "821:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 45,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "821:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 47,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 46,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "829:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "821:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "820:12:2"
            },
            "scope": 86,
            "src": "759:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 62,
              "nodeType": "Block",
              "src": "909:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 63,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccMul",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "862:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$3_calldata_ptr",
                    "typeString": "bytes32[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 52,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "862:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 54,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "33",
                      "id": 53,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "870:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "862:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$3_storage_ptr",
                      "typeString": "bytes32[3]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "861:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "897:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 57,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "897:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 59,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "905:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "897:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "896:12:2"
            },
            "scope": 86,
            "src": "840:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "985:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccAdd",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "938:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$4_calldata_ptr",
                    "typeString": "bytes32[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 64,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "938:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 66,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "34",
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "946:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "938:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$4_storage_ptr",
                      "typeString": "bytes32[4]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "937:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 73,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "973:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 69,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "973:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 71,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 70,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "981:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "973:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "972:12:2"
            },
            "scope": 86,
            "src": "916:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 84,
              "nodeType": "Block",
              "src": "1059:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 85,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_pairing",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "1015:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$8_calldata_ptr",
                    "typeString": "bytes32[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 76,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1015:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 78,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 77,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1023:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1015:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$8_storage_ptr",
                      "typeString": "bytes32[8]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1014:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "1050:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1050:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1049:9:2"
            },
            "scope": 86,
            "src": "992:69:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 176,
        "src": "437:626:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 169,
        "linearizedBaseContracts": [
          169
        ],
        "name": "NizkInterfaceLibrary",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 97,
              "nodeType": "Block",
              "src": "1220:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 98,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateSplitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 90,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "1171:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$39_calldata_ptr",
                    "typeString": "bytes32[39]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 87,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1171:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 89,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3339",
                      "id": 88,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1179:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "39"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1171:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$39_storage_ptr",
                      "typeString": "bytes32[39]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1170:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 96,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 95,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "1207:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 92,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1207:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 94,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 93,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1215:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1207:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1206:13:2"
            },
            "scope": 169,
            "src": "1146:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 109,
              "nodeType": "Block",
              "src": "1300:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 110,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateJoinTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 102,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 110,
                  "src": "1251:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$23_calldata_ptr",
                    "typeString": "bytes32[23]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 99,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1251:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 101,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3233",
                      "id": 100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1259:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "23"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1251:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$23_storage_ptr",
                      "typeString": "bytes32[23]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1250:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 110,
                  "src": "1287:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$19_memory_ptr",
                    "typeString": "bytes32[19]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 104,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1287:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 106,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3139",
                      "id": 105,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1295:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "19"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1287:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$19_storage_ptr",
                      "typeString": "bytes32[19]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1286:13:2"
            },
            "scope": 169,
            "src": "1227:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 121,
              "nodeType": "Block",
              "src": "1380:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 122,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateCommitTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 115,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 114,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 122,
                  "src": "1333:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$6_calldata_ptr",
                    "typeString": "bytes32[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 111,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1333:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 113,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1341:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1333:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$6_storage_ptr",
                      "typeString": "bytes32[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1332:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 119,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 122,
                  "src": "1368:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 116,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1368:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 118,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1376:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1368:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1367:12:2"
            },
            "scope": 169,
            "src": "1307:75:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 133,
              "nodeType": "Block",
              "src": "1461:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 134,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "validateRedeemTx",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 134,
                  "src": "1413:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$10_calldata_ptr",
                    "typeString": "bytes32[10]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 123,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1413:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "3130",
                      "id": 124,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1421:2:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "10"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1413:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
                      "typeString": "bytes32[10]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1412:13:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 131,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 134,
                  "src": "1449:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$7_memory_ptr",
                    "typeString": "bytes32[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 128,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1449:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 130,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1457:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1449:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$7_storage_ptr",
                      "typeString": "bytes32[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1448:12:2"
            },
            "scope": 169,
            "src": "1387:76:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 145,
              "nodeType": "Block",
              "src": "1537:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 146,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccMul",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 138,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 146,
                  "src": "1490:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$3_calldata_ptr",
                    "typeString": "bytes32[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 135,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1490:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 137,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "33",
                      "id": 136,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1498:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1490:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$3_storage_ptr",
                      "typeString": "bytes32[3]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1489:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 143,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 146,
                  "src": "1525:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 140,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1525:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 142,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 141,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1533:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1525:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1524:12:2"
            },
            "scope": 169,
            "src": "1468:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 157,
              "nodeType": "Block",
              "src": "1613:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 158,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_eccAdd",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 150,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "1566:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$4_calldata_ptr",
                    "typeString": "bytes32[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 147,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1566:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 149,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "34",
                      "id": 148,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1574:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1566:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$4_storage_ptr",
                      "typeString": "bytes32[4]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1565:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 155,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "1601:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$2_memory_ptr",
                    "typeString": "bytes32[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 152,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1601:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 154,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 153,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1609:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1601:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$2_storage_ptr",
                      "typeString": "bytes32[2]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1600:12:2"
            },
            "scope": 169,
            "src": "1544:71:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 167,
              "nodeType": "Block",
              "src": "1687:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 168,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "DEBUG_pairing",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 162,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "1643:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$8_calldata_ptr",
                    "typeString": "bytes32[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 159,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1643:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 161,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1651:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": null,
                        "typeString": null
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1643:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$8_storage_ptr",
                      "typeString": "bytes32[8]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1642:12:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 165,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "1678:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 164,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1678:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1677:9:2"
            },
            "scope": 169,
            "src": "1620:69:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 176,
        "src": "1065:626:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 175,
        "linearizedBaseContracts": [
          175
        ],
        "name": "Nizk",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 173,
              "nodeType": "Block",
              "src": "1732:28819:2",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 172,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    switch getFunctionSelector()\n    case 0x75d34641 {\n        validateSplitTx()\n    }\n    case 0xacc8cecd {\n        validateJoinTx()\n    }\n    case 0x814fba66 {\n        validateRedeemTx()\n    }\n    case 0x91036ec8 {\n        validateCommitTx()\n    }\n    case 0x003ec6b9 {\n        let m := mload(0x40)\n        eccMul(calldataload(0x04), calldataload(0x24), calldataload(0x44), m)\n        return(m, 0x40)\n    }\n    case 0x06a791d0 {\n        let m := mload(0x40)\n        calldatacopy(m, 0x04, 0x80)\n        eccCombine(m)\n        return(m, 0x40)\n    }\n    case 0xdda62ba5 {\n        let m := mload(0x40)\n        calldatacopy(m, 0x04, 0x80)\n        validatePairing(m, 0x84)\n        return(m, 0x20)\n    }\n    default {\n        mstore(0x0, 404)\n        revert(0x0, 0x20)\n    }\n    function eccMul(x, y, s, r)\n    {\n        let m := mload(0x40)\n        mstore(m, x)\n        mstore(add(m, 0x20), y)\n        mstore(add(m, 0x40), s)\n        if iszero(staticcall(not(0), 7, m, 0x60, r, 0x40))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function eccCombine(m)\n    {\n        if iszero(staticcall(not(0), 6, m, 0x80, m, 0x40))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(points, g2y)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let g2y_x_1 := calldataload(g2y)\n        let g2y_x_2 := calldataload(add(g2y, 0x20))\n        let g2y_y_1 := calldataload(add(g2y, 0x40))\n        let g2y_y_2 := calldataload(add(g2y, 0x60))\n        if or(or(or(or(or(or(or(iszero(g2y_x_1), iszero(g2y_x_2)), iszero(g2y_y_1)), iszero(g2y_y_2)), eq(g2y_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(g2y_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(g2y_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(g2y_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 500)\n            revert(0x00, 0x20)\n        }\n        let x_1 := mload(points)\n        let y_1 := mload(add(points, 0x20))\n        let x_2 := mload(add(points, 0x40))\n        let y_2 := mload(add(points, 0x60))\n        let m := mload(0x40)\n        mstore(m, x_1)\n        mstore(add(m, 0x20), y_1)\n        mstore(add(m, 0x60), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(add(m, 0x40), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(add(m, 0xa0), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(add(m, 0x80), 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(add(m, 0xc0), x_2)\n        mstore(add(m, 0xe0), y_2)\n        mstore(add(m, 0x120), g2y_x_1)\n        mstore(add(m, 0x100), g2y_x_2)\n        mstore(add(m, 0x160), g2y_y_1)\n        mstore(add(m, 0x140), g2y_y_2)\n        let success := staticcall(not(0), 8, m, 0x180, m, 0x20)\n        if or(iszero(success), iszero(mload(m)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0xa4)\n        let o := 0x84\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0x80))\n        if iszero(eq(calldatasize(), 0xc4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let x := calldataload(0x24)\n        let y := calldataload(0x44)\n        checkWellFormed(x, y)\n        eccMul(x, sub(field_order, y), c, pointCache)\n        eccMul(1, 2, sig_b1(o), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x60), mload(pointCache))\n        mstore(add(pointCache, 0x80), mload(add(pointCache, 0x20)))\n        calldatacopy(pointCache, 0x04, 0x60)\n        let result := keccak256(pointCache, 0xa0)\n        if eq(result, c)\n        {\n            eccMul(1, 2, sig_k(o), add(pointCache, 0x20))\n            mstore(add(pointCache, 0x60), x)\n            mstore(add(pointCache, 0x80), y)\n            eccCombine(add(pointCache, 0x20))\n            mstore(add(pointCache, 0x60), 0x1)\n            mstore(add(pointCache, 0x80), 0x2)\n            calldatacopy(add(pointCache, 0xa0), 0x24, 0x40)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0xe0)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateRedeemTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x124)\n        let o := 0x104\n        let runningHash := hashInputs(0x100)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0x80))\n        if iszero(eq(calldatasize(), 0x144))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n        let x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(c, mulmod(runningHash, sig_k(o), gen_order), gen_order), gen_order)\n        x, y := c1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0xe0)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0xe0)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateJoinTx()\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x2c4)\n        let o := 0x264\n        let runningHash := hashInputs(0x260)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0xc0))\n        if iszero(eq(calldatasize(), 0x2e4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gScalar := mulmod(runningHash, sig_b1(o), gen_order)\n        let x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_b2(o), gen_order), gen_order)\n        x, y := s2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n        x, y := d3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        x, y := c1()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), sub(field_order, y))\n        x, y := c2()\n        mstore(add(pointCache, 0x80), x)\n        mstore(add(pointCache, 0xa0), sub(field_order, y))\n        eccCombine(add(pointCache, 0x40))\n        x, y := c3()\n        mstore(add(pointCache, 0x80), x)\n        mstore(add(pointCache, 0xa0), y)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d2()\n        eccMul(x, y, mulmod(runningHash, sig_b2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0x260)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function validateSplitTx()\n    {\n        if iszero(eq(calldatasize(), 0x4e4))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let c := calldataload(0x444)\n        let o := 0x364\n        let runningHash := hashInputs(0x360)\n        let pointCache := mload(0x40)\n        mstore(0x40, add(pointCache, 0xc0))\n        let x, y := sigma1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), pointCache)\n        x, y := gamma1()\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x80))\n        let temp := runningHash\n        runningHash := advanceHash(runningHash)\n        x, y := sigma2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := gamma2()\n        eccMul(x, y, mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(add(pointCache, 0x40))\n        x := mload(pointCache)\n        y := mload(add(pointCache, 0x20))\n        validatePairing(pointCache, 0x464)\n        mstore(pointCache, x)\n        mstore(add(pointCache, 0x20), y)\n        let gScalar := mulmod(temp, sig_r1(o), gen_order)\n        x, y := gamma1()\n        eccMul(x, sub(field_order, y), mulmod(temp, sig_k2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_r2(o), gen_order), gen_order)\n        x, y := gamma2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, sig_k3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_b1(o), gen_order), gen_order)\n        x, y := s1()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a2(o), gen_order), gen_order)\n        x, y := d2()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_a3(o), gen_order), gen_order)\n        x, y := d3()\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n        x, y := c2()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 1)\n        mstore(add(pointCache, 0xa0), 2)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s2()\n        eccMul(x, y, mulmod(runningHash, sig_a2(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n        x, y := c3()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 1)\n        mstore(add(pointCache, 0xa0), 2)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := s3()\n        eccMul(x, y, mulmod(runningHash, sig_a3(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        runningHash := advanceHash(runningHash)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k2(o), gen_order), gen_order)\n        gScalar := addmod(gScalar, mulmod(runningHash, sig_k3(o), gen_order), gen_order)\n        x, y := c1()\n        mstore(add(pointCache, 0x40), x)\n        mstore(add(pointCache, 0x60), y)\n        mstore(add(pointCache, 0x80), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd3)\n        mstore(add(pointCache, 0xa0), 0x15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4)\n        eccCombine(add(pointCache, 0x40))\n        x := mload(add(pointCache, 0x40))\n        y := mload(add(pointCache, 0x60))\n        eccMul(x, sub(field_order, y), mulmod(runningHash, c, gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        x, y := d1()\n        eccMul(x, y, mulmod(runningHash, sig_b1(o), gen_order), add(pointCache, 0x40))\n        eccCombine(pointCache)\n        eccMul(1, 2, gScalar, add(pointCache, 0x40))\n        eccCombine(pointCache)\n        mstore(add(pointCache, 0x40), runningHash)\n        let result := keccak256(pointCache, 0x60)\n        if eq(result, c)\n        {\n            calldatacopy(add(pointCache, 0x20), 0x24, 0x240)\n            mstore(pointCache, 0x1)\n            return(pointCache, 0x260)\n        }\n        mstore(0x00, 403)\n        revert(0x00, 0x20)\n    }\n    function getFunctionSelector() -> v\n    {\n        v := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)\n    }\n    function hashInputs(commitmentSize) -> v\n    {\n        calldatacopy(mload(0x40), 0x04, commitmentSize)\n        v := keccak256(mload(0x40), commitmentSize)\n    }\n    function advanceHash(h) -> r\n    {\n        mstore(0x00, h)\n        r := keccak256(0x00, 0x20)\n    }\n    function c1() -> px, py\n    {\n        px := calldataload(0x24)\n        py := calldataload(0x44)\n        checkWellFormed(px, py)\n    }\n    function d1() -> px, py\n    {\n        px := calldataload(0x64)\n        py := calldataload(0x84)\n        checkWellFormed(px, py)\n    }\n    function s1() -> px, py\n    {\n        px := calldataload(0xa4)\n        py := calldataload(0xc4)\n        checkWellFormed(px, py)\n    }\n    function c2() -> px, py\n    {\n        px := calldataload(0xe4)\n        py := calldataload(0x104)\n        checkWellFormed(px, py)\n    }\n    function d2() -> px, py\n    {\n        px := calldataload(0x124)\n        py := calldataload(0x144)\n        checkWellFormed(px, py)\n    }\n    function s2() -> px, py\n    {\n        px := calldataload(0x164)\n        py := calldataload(0x184)\n        checkWellFormed(px, py)\n    }\n    function c3() -> px, py\n    {\n        px := calldataload(0x1a4)\n        py := calldataload(0x1c4)\n        checkWellFormed(px, py)\n    }\n    function d3() -> px, py\n    {\n        px := calldataload(0x1e4)\n        py := calldataload(0x204)\n        checkWellFormed(px, py)\n    }\n    function s3() -> px, py\n    {\n        px := calldataload(0x224)\n        py := calldataload(0x244)\n        checkWellFormed(px, py)\n    }\n    function gamma1() -> px, py\n    {\n        px := calldataload(0x264)\n        py := calldataload(0x284)\n        checkWellFormed(px, py)\n    }\n    function sigma1() -> px, py\n    {\n        px := calldataload(0x2a4)\n        py := calldataload(0x2c4)\n        checkWellFormed(px, py)\n    }\n    function gamma2() -> px, py\n    {\n        px := calldataload(0x2e4)\n        py := calldataload(0x304)\n        checkWellFormed(px, py)\n    }\n    function sigma2() -> px, py\n    {\n        px := calldataload(0x324)\n        py := calldataload(0x344)\n        checkWellFormed(px, py)\n    }\n    function checkWellFormed(px, py)\n    {\n        let p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        if iszero(eq(addmod(mulmod(mulmod(px, px, p), px, p), 3, p), mulmod(py, py, p)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function sig_k(offset) -> v\n    {\n        v := calldataload(sub(offset, 0x20))\n    }\n    function sig_b1(offset) -> v\n    {\n        v := loadSignature(offset)\n    }\n    function sig_b2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x20))\n    }\n    function sig_a2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x20))\n    }\n    function sig_a3(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x40))\n    }\n    function sig_k2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x60))\n    }\n    function sig_k3(offset) -> v\n    {\n        v := loadSignature(add(offset, 0x80))\n    }\n    function sig_r1(offset) -> v\n    {\n        v := loadSignature(add(offset, 0xa0))\n    }\n    function sig_r2(offset) -> v\n    {\n        v := loadSignature(add(offset, 0xc0))\n    }\n    function loadSignature(location) -> v\n    {\n        v := calldataload(location)\n        if iszero(and(iszero(iszero(v)), eq(v, mod(v, 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n}",
                  "src": "1742:28809:2"
                }
              ]
            },
            "documentation": null,
            "id": 174,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 170,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1722:2:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:0:2"
            },
            "scope": 175,
            "src": "1713:28838:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 176,
        "src": "1693:28860:2"
      }
    ],
    "src": "0:30553:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.23+commit.124ca40d.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-08-30T13:02:27.732Z"
}